# Production Deployment

This guide covers deploying the SQLite MCP Server in production environments using systemd services, monitoring, and best practices.

## Automated Deployment

### Quick Deploy

The project includes an automated deployment script that sets up everything needed for production:

```bash
# Deploy as systemd service (requires sudo)
sudo ./scripts/deploy.sh
```

This script will:
- Create a dedicated system user `mcp`
- Copy files to `/opt/sqlite-mcp-server`
- Create systemd service file
- Set up log directory with proper permissions
- Install and enable the service

### Manual Verification

After deployment, verify the installation:

```bash
# Check service status
sudo systemctl status sqlite-mcp-server

# Check log directory
ls -la /var/log/sqlite-mcp-server/

# Check installation directory
ls -la /opt/sqlite-mcp-server/
```

## Service Management

### Basic Commands

```bash
# Start the service
sudo systemctl start sqlite-mcp-server

# Stop the service
sudo systemctl stop sqlite-mcp-server

# Restart the service
sudo systemctl restart sqlite-mcp-server

# Enable auto-start on boot
sudo systemctl enable sqlite-mcp-server

# Disable auto-start on boot
sudo systemctl disable sqlite-mcp-server

# Check service status
sudo systemctl status sqlite-mcp-server
```

### Service Configuration

The systemd service file is located at `/etc/systemd/system/sqlite-mcp-server.service`:

```ini
[Unit]
Description=SQLite MCP Server
After=network.target

[Service]
Type=simple
User=mcp
Group=mcp
WorkingDirectory=/opt/sqlite-mcp-server
ExecStart=/usr/bin/python3 main.py --host 0.0.0.0 --port 9999
Restart=always
RestartSec=10
StandardOutput=journal
StandardError=journal

[Install]
WantedBy=multi-user.target
```

### Custom Configuration

To modify service configuration:

```bash
# Edit service file
sudo systemctl edit sqlite-mcp-server

# Or edit the main file directly
sudo nano /etc/systemd/system/sqlite-mcp-server.service

# Reload systemd after changes
sudo systemctl daemon-reload

# Restart service
sudo systemctl restart sqlite-mcp-server
```

## Monitoring & Logging

### Log Management

Production logs are written to:
- **systemd journal:** `sudo journalctl -u sqlite-mcp-server`
- **File logs:** `/var/log/sqlite-mcp-server/mcp_server_YYYYMMDD.log`

### Real-time Monitoring

```bash
# Follow live logs
sudo journalctl -u sqlite-mcp-server -f

# View recent logs
sudo journalctl -u sqlite-mcp-server -n 100

# View logs from specific time
sudo journalctl -u sqlite-mcp-server --since "2025-06-05 10:00:00"

# View error logs only
sudo journalctl -u sqlite-mcp-server -p err
```

### Health Monitoring

Set up health checks to monitor server status:

```bash
#!/bin/bash
# health_check.sh - Simple health monitoring script

HEALTH_URL="http://localhost:9999/health"
LOG_FILE="/var/log/sqlite-mcp-server/health_check.log"

if curl -s "$HEALTH_URL" | grep -q "healthy"; then
    echo "$(date): Server is healthy" >> "$LOG_FILE"
else
    echo "$(date): Server health check failed" >> "$LOG_FILE"
    # Optional: restart service
    # sudo systemctl restart sqlite-mcp-server
fi
```

### Log Rotation

Configure logrotate for file logs:

```bash
# Create logrotate config
sudo tee /etc/logrotate.d/sqlite-mcp-server << EOF
/var/log/sqlite-mcp-server/*.log {
    daily
    rotate 30
    compress
    delaycompress
    missingok
    notifempty
    create 644 mcp mcp
    postrotate
        systemctl reload sqlite-mcp-server
    endscript
}
EOF
```

## Performance Tuning

### Environment Variables

Set production environment variables in the service file:

```ini
[Service]
Environment=MCP_HOST=0.0.0.0
Environment=MCP_PORT=9999
Environment=MCP_LOG_LEVEL=INFO
Environment=MCP_MAX_CONNECTIONS=50
Environment=MCP_MAX_QUERY_TIME=120
Environment=MCP_MAX_RESULT_ROWS=25000
```

### System Limits

For high-load environments, adjust system limits:

```bash
# Edit limits
sudo nano /etc/security/limits.conf

# Add entries for mcp user
mcp soft nofile 65536
mcp hard nofile 65536
mcp soft nproc 32768
mcp hard nproc 32768
```

### Database Optimization

For better SQLite performance:

```bash
# Set SQLite environment variables
Environment=SQLITE_TMPDIR=/tmp
Environment=SQLITE_CACHE_SIZE=10000
```

## Security Configuration

### Firewall Setup

Configure firewall to allow only necessary traffic:

```bash
# Allow MCP server port
sudo ufw allow 9999/tcp

# For internal use only, restrict to specific IPs
sudo ufw allow from 192.168.1.0/24 to any port 9999

# Check firewall status
sudo ufw status
```

### File Permissions

Ensure proper file permissions:

```bash
# Set ownership and permissions
sudo chown -R mcp:mcp /opt/sqlite-mcp-server
sudo chmod -R 755 /opt/sqlite-mcp-server
sudo chmod 644 /opt/sqlite-mcp-server/*.py

# Secure log directory
sudo chown -R mcp:mcp /var/log/sqlite-mcp-server
sudo chmod 755 /var/log/sqlite-mcp-server
```

### Database Security

Protect database files:

```bash
# Create secure database directory
sudo mkdir -p /var/lib/sqlite-mcp-server/databases
sudo chown mcp:mcp /var/lib/sqlite-mcp-server/databases
sudo chmod 700 /var/lib/sqlite-mcp-server/databases

# Set database file permissions
sudo chmod 600 /var/lib/sqlite-mcp-server/databases/*.db
```

## ðŸ”„ Backup & Recovery

### Database Backup

Create automated database backups:

```bash
#!/bin/bash
# backup_databases.sh

BACKUP_DIR="/var/backups/sqlite-mcp-server"
DATE=$(date +%Y%m%d_%H%M%S)

mkdir -p "$BACKUP_DIR"

# Backup all databases
for db in /var/lib/sqlite-mcp-server/databases/*.db; do
    if [ -f "$db" ]; then
        filename=$(basename "$db")
        cp "$db" "$BACKUP_DIR/${filename}_${DATE}.backup"
    fi
done

# Keep only last 30 days of backups
find "$BACKUP_DIR" -name "*.backup" -mtime +30 -delete
```

### Service Backup

Backup service configuration:

```bash
# Backup systemd service file
sudo cp /etc/systemd/system/sqlite-mcp-server.service /var/backups/

# Backup application files
sudo tar -czf /var/backups/sqlite-mcp-server_$(date +%Y%m%d).tar.gz \
    /opt/sqlite-mcp-server/
```

## ðŸ“ˆ Scaling Considerations

### Load Balancing

For high availability, consider running multiple instances:

```bash
# Run multiple instances on different ports
sudo systemctl start sqlite-mcp-server@9999
sudo systemctl start sqlite-mcp-server@10000
sudo systemctl start sqlite-mcp-server@10001
```

### Resource Monitoring

Monitor system resources:

```bash
# CPU and memory usage
htop

# Network connections
netstat -tulpn | grep :9999

# Disk I/O
iotop

# Service resource usage
systemctl status sqlite-mcp-server
```

## Troubleshooting Production Issues

### Common Production Problems

**Service won't start:**
```bash
# Check service logs
sudo journalctl -u sqlite-mcp-server -n 50

# Check port availability
sudo ss -tulpn | grep :9999

# Verify file permissions
ls -la /opt/sqlite-mcp-server/
```

**High memory usage:**
```bash
# Check process memory
ps aux | grep main.py

# Reduce result limits
sudo systemctl edit sqlite-mcp-server
# Add: Environment=MCP_MAX_RESULT_ROWS=5000
```

**Database connection issues:**
```bash
# Check database file permissions
ls -la /var/lib/sqlite-mcp-server/databases/

# Test database connectivity
sudo -u mcp sqlite3 /var/lib/sqlite-mcp-server/databases/test.db ".tables"
```

## Production Checklist

Before going live:

- [ ] Service deployed and enabled
- [ ] Firewall configured
- [ ] Log rotation set up
- [ ] Health monitoring configured
- [ ] Database backups scheduled
- [ ] Resource limits configured
- [ ] Security permissions verified
- [ ] Load testing completed
- [ ] Monitoring alerts configured
- [ ] Documentation updated

## ðŸš¨ Emergency Procedures

### Quick Recovery

If the service becomes unresponsive:

```bash
# Force restart
sudo systemctl stop sqlite-mcp-server
sudo pkill -f main.py
sudo systemctl start sqlite-mcp-server

# Check for issues
sudo journalctl -u sqlite-mcp-server -f
```

### Rollback Procedure

To rollback to a previous version:

```bash
# Stop service
sudo systemctl stop sqlite-mcp-server

# Restore from backup
sudo tar -xzf /var/backups/sqlite-mcp-server_YYYYMMDD.tar.gz -C /

# Start service
sudo systemctl start sqlite-mcp-server
```

---

**Next Steps:** Once production deployment is complete, refer to the [Troubleshooting Guide](Troubleshooting) for common issues and the [Monitoring Guide](Monitoring) for ongoing maintenance.
