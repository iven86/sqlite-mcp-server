# Configuration Guide

SQLite MCP Server offers flexible configuration through command line arguments and environment variables.

## Command Line Options

```bash
python3 main.py [OPTIONS]
```

### Available Options

| Option | Type | Default | Description |
|--------|------|---------|-------------|
| `--host` | string | `localhost` | Host to bind to (use `0.0.0.0` for all interfaces) |
| `--port` | integer | `9999` | Port to bind to |
| `--log-level` | choice | `INFO` | Log level: DEBUG, INFO, WARNING, ERROR |
| `--max-connections` | integer | `10` | Maximum concurrent database connections |
| `--max-query-time` | integer | `60` | Maximum query execution time in seconds |
| `--max-result-rows` | integer | `10000` | Maximum rows returned per query |
| `--daemon` | flag | `False` | Run as daemon (background process) |
| `--version` | flag | - | Show version information |
| `--help` | flag | - | Show help message |

### Usage Examples

```bash
# Basic configuration
python3 main.py --host localhost --port 8080

# Production configuration
python3 main.py --host 0.0.0.0 --port 9999 --log-level INFO --max-connections 50

# Development configuration
python3 main.py --log-level DEBUG --max-query-time 30

# High-performance configuration
python3 main.py --max-connections 100 --max-result-rows 50000 --max-query-time 120
```

## Environment Variables

You can also configure the server using environment variables. These are especially useful for production deployments.

### Server Configuration

```bash
# Basic server settings
export MCP_HOST=localhost
export MCP_PORT=9999
export MCP_LOG_LEVEL=INFO
```

### Performance Settings

```bash
# Connection and performance limits
export MCP_MAX_CONNECTIONS=20
export MCP_MAX_QUERY_TIME=60
export MCP_MAX_RESULT_ROWS=10000
```

### Using Environment Variables

```bash
# Set environment variables
export MCP_HOST=0.0.0.0
export MCP_PORT=8080
export MCP_LOG_LEVEL=DEBUG

# Start server (will use environment variables)
python3 main.py
```

## Configuration Files

### Using start_server.sh

The included startup script supports environment variable configuration:

```bash
# Edit the script to set defaults
vim scripts/start_server.sh

# Or set variables before running
export MCP_PORT=8080
./scripts/start_server.sh
```

### Creating a .env File

You can create a `.env` file for local development:

```bash
# Create .env file
cat > .env << EOF
MCP_HOST=localhost
MCP_PORT=9999
MCP_LOG_LEVEL=DEBUG
MCP_MAX_CONNECTIONS=10
MCP_MAX_QUERY_TIME=60
MCP_MAX_RESULT_ROWS=10000
EOF

# Load and start (bash)
source .env && python3 main.py
```

## Security Configuration

### Network Security

```bash
# Bind to localhost only (secure, local access only)
python3 main.py --host localhost

# Bind to all interfaces (less secure, allows remote access)
python3 main.py --host 0.0.0.0

# Use non-standard port for security through obscurity
python3 main.py --port 8443
```

### Resource Limits

```bash
# Conservative limits for shared environments
python3 main.py --max-connections 5 --max-query-time 30 --max-result-rows 1000

# Generous limits for dedicated servers
python3 main.py --max-connections 100 --max-query-time 300 --max-result-rows 100000
```

## Performance Tuning

### For High-Traffic Servers

```bash
# Optimized for many concurrent connections
python3 main.py \
  --host 0.0.0.0 \
  --port 9999 \
  --max-connections 100 \
  --max-query-time 120 \
  --max-result-rows 50000 \
  --log-level WARNING
```

### For Development

```bash
# Optimized for debugging and development
python3 main.py \
  --host localhost \
  --port 9999 \
  --max-connections 5 \
  --max-query-time 30 \
  --max-result-rows 1000 \
  --log-level DEBUG
```

### For Data Analysis

```bash
# Optimized for large data processing
python3 main.py \
  --max-connections 20 \
  --max-query-time 300 \
  --max-result-rows 100000 \
  --log-level INFO
```

## Logging Configuration

### Log Levels

- **DEBUG:** Detailed information for debugging
- **INFO:** General information about server operation
- **WARNING:** Warning messages about potential issues
- **ERROR:** Error messages for failed operations

### Log Output

Logs are written to:
- **Console:** Real-time output (all environments)
- **File:** `logs/mcp_server_YYYYMMDD.log` (automatic rotation)

### Log Examples

```bash
# Verbose logging for troubleshooting
python3 main.py --log-level DEBUG

# Minimal logging for production
python3 main.py --log-level ERROR

# View logs in real-time
tail -f logs/mcp_server_$(date +%Y%m%d).log
```

## Configuration Validation

The server validates configuration on startup:

```bash
# Test configuration without starting
python3 main.py --help

# Start with verbose validation
python3 main.py --log-level DEBUG
```

### Common Configuration Errors

1. **Port already in use:**
   ```
   Error: Cannot bind to localhost:9999 - Address already in use
   ```
   Solution: Use a different port with `--port 8080`

2. **Invalid log level:**
   ```
   Error: argument --log-level: invalid choice: 'VERBOSE'
   ```
   Solution: Use DEBUG, INFO, WARNING, or ERROR

3. **Invalid numeric values:**
   ```
   Error: argument --max-connections: invalid int value: 'unlimited'
   ```
   Solution: Use numeric values only

## Next Steps

- [🛠️ API Reference](API-Reference) - Learn about available endpoints
- [🚀 Production Deployment](Production-Deployment) - Deploy for production
- [💡 Examples](Examples) - See configuration examples in action