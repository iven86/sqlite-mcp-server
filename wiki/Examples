# Examples

Real-world examples and use cases for SQLite MCP Server.

## Basic Examples

### 1. Health Check

Check if the server is running:

```bash
curl http://localhost:9999/health
```

Expected response:
```json
{
  "success": true,
  "status": "healthy",
  "timestamp": "2025-06-06T...",
  "current_database": null,
  "initialized": true
}
```

### 2. Initialize MCP Connection

Initialize the MCP protocol connection:

```bash
curl -X POST http://localhost:9999/ \
  -H "Content-Type: application/json" \
  -d '{
    "jsonrpc": "2.0",
    "method": "initialize",
    "params": {
      "protocolVersion": "2025-03-26",
      "clientInfo": {
        "name": "example-client",
        "version": "1.0.0"
      }
    },
    "id": "1"
  }'
```

Expected response:
```json
{
  "jsonrpc": "2.0",
  "result": {
    "protocolVersion": "2025-03-26",
    "capabilities": {
      "tools": {}
    },
    "serverInfo": {
      "name": "sqlite-mcp-server",
      "version": "1.0.0"
    }
  },
  "id": "1"
}
```

### 3. Connect to Database

```bash
curl -X POST http://localhost:9999/ \
  -H "Content-Type: application/json" \
  -d '{
    "jsonrpc": "2.0",
    "method": "tools/call",
    "params": {
      "name": "connect_database",
      "arguments": {
        "db_path": "./sample.db"
      }
    },
    "id": "2"
  }'
```

### 4. List All Tables

```bash
curl -X POST http://localhost:9999/ \
  -H "Content-Type: application/json" \
  -d '{
    "jsonrpc": "2.0",
    "method": "tools/call",
    "params": {
      "name": "get_tables",
      "arguments": {}
    },
    "id": "3"
  }'
```

## Database Operations

### Creating a Sample Database

Create a sample SQLite database for testing:

```bash
# Create a sample database
sqlite3 sample.db << 'EOF'
CREATE TABLE users (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    email TEXT UNIQUE,
    age INTEGER,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE orders (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    product TEXT,
    amount DECIMAL(10,2),
    order_date DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id)
);

INSERT INTO users (name, email, age) VALUES 
    ('John Doe', 'john@example.com', 30),
    ('Jane Smith', 'jane@example.com', 25),
    ('Bob Johnson', 'bob@example.com', 35);

INSERT INTO orders (user_id, product, amount) VALUES 
    (1, 'Laptop', 999.99),
    (1, 'Mouse', 29.99),
    (2, 'Keyboard', 79.99),
    (3, 'Monitor', 299.99);
EOF
```

### Query Examples

#### Simple SELECT

```bash
curl -X POST http://localhost:9999/ \
  -H "Content-Type: application/json" \
  -d '{
    "jsonrpc": "2.0",
    "method": "tools/call",
    "params": {
      "name": "query",
      "arguments": {
        "sql": "SELECT * FROM users"
      }
    },
    "id": "3"
  }'
```

#### Parameterized Query

```bash
curl -X POST http://localhost:9999/ \
  -H "Content-Type: application/json" \
  -d '{
    "jsonrpc": "2.0",
    "method": "tools/call",
    "params": {
      "name": "query",
      "arguments": {
        "sql": "SELECT * FROM users WHERE age > ? ORDER BY name",
        "params": [25]
      }
    },
    "id": "4"
  }'
```

#### JOIN Query

```bash
curl -X POST http://localhost:9999/ \
  -H "Content-Type: application/json" \
  -d '{
    "jsonrpc": "2.0",
    "method": "tools/call",
    "params": {
      "name": "query",
      "arguments": {
        "sql": "SELECT u.name, u.email, o.product, o.amount FROM users u JOIN orders o ON u.id = o.user_id"
      }
    },
    "id": "5"
  }'
```

### CRUD Operations

#### Create (Insert)

```bash
curl -X POST http://localhost:9999/ \
  -H "Content-Type: application/json" \
  -d '{
    "jsonrpc": "2.0",
    "method": "tools/call",
    "params": {
      "name": "create",
      "arguments": {
        "table": "users",
        "data": {
          "name": "Alice Brown",
          "email": "alice@example.com",
          "age": 28
        }
      }
    },
    "id": "6"
  }'
```

#### Read with Filtering

```bash
curl -X POST http://localhost:9999/ \
  -H "Content-Type: application/json" \
  -d '{
    "jsonrpc": "2.0",
    "method": "tools/call",
    "params": {
      "name": "read",
      "arguments": {
        "table": "users",
        "where": {"age": 30},
        "order_by": "name ASC"
      }
    },
    "id": "7"
  }'
```

#### Update

```bash
curl -X POST http://localhost:9999/ \
  -H "Content-Type: application/json" \
  -d '{
    "jsonrpc": "2.0",
    "method": "tools/call",
    "params": {
      "name": "update",
      "arguments": {
        "table": "users",
        "data": {"age": 31},
        "where": {"name": "John Doe"}
      }
    },
    "id": "8"
  }'
```

#### Delete

```bash
curl -X POST http://localhost:9999/ \
  -H "Content-Type: application/json" \
  -d '{
    "jsonrpc": "2.0",
    "method": "tools/call",
    "params": {
      "name": "delete",
      "arguments": {
        "table": "orders",
        "where": {"id": 1}
      }
    },
    "id": "9"
  }'
```

## Schema Operations

### Get Table Schema

```bash
curl -X POST http://localhost:9999/ \
  -H "Content-Type: application/json" \
  -d '{
    "jsonrpc": "2.0",
    "method": "tools/call",
    "params": {
      "name": "get_schema",
      "arguments": {
        "table": "users"
      }
    },
    "id": "10"
  }'
```

### Analyze Table

```bash
curl -X POST http://localhost:9999/ \
  -H "Content-Type: application/json" \
  -d '{
    "jsonrpc": "2.0",
    "method": "tools/call",
    "params": {
      "name": "analyze_table",
      "arguments": {
        "table": "users"
      }
    },
    "id": "11"
  }'
```

### VS Code Integration

Add this to your VS Code `settings.json`:

```json
{
  "mcp": {
    "servers": {
      "sqlite-mcp": {
        "url": "http://localhost:9999",
        "name": "SQLite Database Server"
      }
    }
  }
}
```

### Usage with AI Assistants

Once configured, you can ask AI assistants:

**Query Examples:**
- "Show me all tables in the database"
- "Get the schema for the users table"
- "Find all users older than 25"
- "Show me the total number of orders"
- "List the top 5 products by sales amount"

**Analysis Examples:**
- "What's the average age of users?"
- "How many orders were placed last month?"
- "Which user has made the most orders?"
- "Show me users who haven't placed any orders"

## Python Client Example

Here's a simple Python client to interact with the server:

```python
#!/usr/bin/env python3
import json
import requests

class SQLiteMCPClient:
    def __init__(self, base_url="http://localhost:9999"):
        self.base_url = base_url
        self.session = requests.Session()
        self.request_id = 1
    
    def _send_request(self, method, params=None):
        payload = {
            "jsonrpc": "2.0",
            "method": method,
            "params": params or {},
            "id": str(self.request_id)
        }
        self.request_id += 1
        
        response = self.session.post(self.base_url, json=payload)
        return response.json()
    
    def health_check(self):
        response = self.session.get(f"{self.base_url}/health")
        return response.json()
    
    def connect_database(self, db_path):
        return self._send_request("tools/call", {
            "name": "connect_database",
            "arguments": {"db_path": db_path}
        })
    
    def query(self, sql, params=None):
        return self._send_request("tools/call", {
            "name": "query",
            "arguments": {"sql": sql, "params": params or []}
        })
    
    def get_tables(self):
        return self._send_request("tools/call", {
            "name": "get_tables",
            "arguments": {}
        })
    
    def get_schema(self, table):
        return self._send_request("tools/call", {
            "name": "get_schema",
            "arguments": {"table": table}
        })

# Usage example
if __name__ == "__main__":
    client = SQLiteMCPClient()
    
    # Check server health
    health = client.health_check()
    print(f"Server status: {health['status']}")
    
    # Connect to database
    result = client.connect_database("./sample.db")
    print(f"Database connection: {result}")
    
    # List tables
    tables = client.get_tables()
    print(f"Tables: {tables}")
    
    # Query data
    users = client.query("SELECT * FROM users LIMIT 5")
    print(f"Users: {users}")
```

## Advanced Examples

### Batch Operations

```bash
# Create multiple users in a transaction-like manner
for name in "Alice" "Bob" "Charlie"; do
    curl -X POST http://localhost:9999/ \
      -H "Content-Type: application/json" \
      -d "{
        \"jsonrpc\": \"2.0\",
        \"method\": \"tools/call\",
        \"params\": {
          \"name\": \"create\",
          \"arguments\": {
            \"table\": \"users\",
            \"data\": {
              \"name\": \"$name\",
              \"email\": \"${name,,}@example.com\",
              \"age\": $((RANDOM % 50 + 18))
            }
          }
        },
        \"id\": \"batch-$name\"
      }"
done
```

### Data Migration

```bash
# Export data from one table
curl -X POST http://localhost:9999/ \
  -H "Content-Type: application/json" \
  -d '{
    "jsonrpc": "2.0",
    "method": "tools/call",
    "params": {
      "name": "query",
      "arguments": {
        "sql": "SELECT * FROM users"
      }
    },
    "id": "export"
  }' > users_export.json

# Process and import to another database
# (would require additional scripting)
```

### Performance Testing

```bash
# Test query performance with timing
time curl -X POST http://localhost:9999/ \
  -H "Content-Type: application/json" \
  -d '{
    "jsonrpc": "2.0",
    "method": "tools/call",
    "params": {
      "name": "query",
      "arguments": {
        "sql": "SELECT COUNT(*) FROM users"
      }
    },
    "id": "perf-test"
  }'
```

## Error Handling Examples

### Handling Invalid Queries

```bash
# This will return an error
curl -X POST http://localhost:9999/ \
  -H "Content-Type: application/json" \
  -d '{
    "jsonrpc": "2.0",
    "method": "tools/call",
    "params": {
      "name": "query",
      "arguments": {
        "sql": "SELECT * FROM nonexistent_table"
      }
    },
    "id": "error-test"
  }'
```

Expected error response:
```json
{
  "jsonrpc": "2.0",
  "error": {
    "code": -32603,
    "message": "Query execution failed: no such table: nonexistent_table"
  },
  "id": "error-test"
}
```

## Next Steps

- [Configuration](Configuration) - Configure the server for your needs
- [API Reference](API-Reference) - Complete API documentation
- [Production Deployment](Production-Deployment) - Deploy for production use
- [Troubleshooting](Troubleshooting) - Solve common issues